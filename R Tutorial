setwd('C:/Users/Asus/Desktop/Rscripts/Data/')
getwd()
#Loading data
ls()
library(readr)
fin <- read.csv("Future500.csv.csv",na.strings=c(""))
head(fin)
tail(fin,10)
str(fin)
summary(fin)

#Changing From Non-factor to factor .. factor is more like numerical encoding
fin$ID <- factor(fin$ID)
fin$Inception <- factor(fin$Inception)
summary(fin)
#Factorial variable trap happens when changing from factorial to non factorial vice versa.
a <- c("12","13","12","12")
a
typeof(a)
b<-as.numeric(a)
typeof(b)

#converting into numberics for Factors
z<-factor(c("12","13","14","12","12"))
typeof(z)
#Now to getrid of factorization for z
y<-as.numeric(as.character(z))
y

#more #Dangerous dont do the below way
fin$Profit<- factor(fin$Profit)
fin$Profit<-as.numeric(fin$Profit)
str(fin)

fin

#Sub and gsub is for substitution based on patterns. gsub replaces all instances
fin$Expenses <- gsub(" Dollars","",fin$Expenses)
fin$Expenses <- gsub(",","",fin$Expenses)


fin$Revenue <- gsub("\\$","",fin$Revenue)
fin$Revenue <- gsub(",","",fin$Revenue)

fin$Growth <- gsub("\\%","",fin$Growth)

fin$Expenses <- as.numeric(fin$Expenses)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Growth <- as.numeric(fin$Growth)

summary(fin)


fin[!complete.cases(fin),]


#Filtering : using which() for non-missing data
head(fin)
fin[fin$Revenue == 9746272,]
fin[which(fin$Revenue == 9746272),]
#Displaying NA
fin[fin$Expenses == NA,] #This wont help
fin[is.na(fin$Expenses),]

#Removing Emptyvalues

fin_backup <- fin
fin[!complete.cases(fin),]
fin[is.na(fin$Industry),]#Opposite
fin<-fin[!is.na(fin$Industry),]
#Resetting dataframe index
fin
rownames(fin)
rownames(fin)<-1:nrow(fin) 

#Faster way to reset
rownames(fin)<- NULL

#Replacing missing Data:Factual Analysis

fin[!complete.cases(fin),]

fin[is.na(fin$State),]
fin[is.na(fin$State) & fin$City== "New York",]
fin[is.na(fin$State) & fin$City == "New York","State"] <- "NY"

#Check those rows to see state updated to NY
fin[c(11,377),]
#Lets do the same for Sanfrancisco

fin[is.na(fin$State) & fin$City== "San Francisco",]
fin[is.na(fin$State) & fin$City == "San Francisco","State"] <- "CA"

fin[c(82,265),]

#Replacing Missing  Data: Median Imputation Method(Part 1)

med_empl_retail <- median(fin[fin$Industry == "Retail","Employees"], na.rm=TRUE)
med_empl_retail

fin[is.na(fin$Employees) & fin$Industry == "Retail",]
fin[is.na(fin$Employees) & fin$Industry == "Retail","Employees"] <- med_empl_retail

#Check:
fin[3,]

med_empl_finserv <- median(fin[fin$Industry=="Financial Services","Employees"],na.rm = TRUE)
med_empl_finserv
fin[is.na(fin$Employees) & fin$Industry=="Financial Services",]
fin[is.na(fin$Employees) & fin$Industry=="Financial Services","Employees"]<- med_empl_finserv
#Lets do it for Growth

#Growth

med_growth_constr <- median(fin[fin$Industry=="Construction","Growth"],na.rm = TRUE)
med_growth_constr
fin[is.na(fin$Growth) & fin$Industry=="Construction","Growth"]
fin[is.na(fin$Growth) & fin$Industry=="Construction","Growth"]<-med_growth_constr
#Lets do it for Growth

fin[8,]


#expenses
med_exp_constr <- median(fin[fin$Industry=="Construction","Expenses"],na.rm = TRUE)
med_exp_constr
fin[is.na(fin$Expenses) & fin$Industry=="Construction" & is.na(fin$Profit),"Expenses"]
fin[is.na(fin$Expenses) & fin$Industry=="Construction" & is.na(fin$Profit),"Expenses"]<-med_exp_constr


#Revenue
med_rev_constr <- median(fin[fin$Industry=="Construction","Revenue"],na.rm = TRUE)
med_rev_constr
fin[is.na(fin$Revenue) & fin$Industry=="Construction" & is.na(fin$Profit),"Revenue"]
fin[is.na(fin$Revenue) & fin$Industry=="Construction" & is.na(fin$Profit),"Revenue"]<-med_rev_constr


#Derviving values

fin[is.na(fin$Profit),"Profit"] <- fin[is.na(fin$Profit),"Revenue"] - fin[is.na(fin$Profit),"Expenses"]
fin[c(8,42),]

fin[is.na(fin$Expenses),"Expenses"] <- fin[is.na(fin$Expenses),"Revenue"] - fin[is.na(fin$Expenses),"Profit"]
fin[15,]

#Lets look at visualizations

#install.packages(ggplot2)
library(ggplot2)
p<-ggplot(data=fin)

p + geom_point((aes(x=Revenue, y = Expenses, color=Industry , size = Profit)))

#A scatter plot with industry trends for the expenses

d<- ggplot(data=fin, (aes(x=Revenue, y = Expenses, color=Industry ) ))
d + geom_point() + geom_smooth(fill=NA, size=1.2)


f<- ggplot(data=fin, (aes(x=Revenue, y = Growth, color=Industry ) ))
f + geom_jitter()+ geom_boxplot(size = 1,alpha = 0.5, outlier.alpha = NA)
#End of project 1

#Machine Utilizations 


util <-read.csv("Machine Utilization.csv.csv")
head(util,12)
str(util)
summary(util)
#Derive utilizations

util$Utilization = 1 - util$Percent.Idle

#Handling Date -Times in R

?POSIXct
util$PosixTime <- as.POSIXct(util$Timestamp, format = "%d/%m/%Y %H:%M")

#Rearranging column in DF(Data Frame)

util$Timestamp <- NULL
head(util,12)
util<-util[,c(4,1,2,3)]

#Lists
RL1 <- util[util$Machine=="RL1",]
utils_stats_rl1 <- c(min(RL1$Utilization, na.rm = T),
                     mean(RL1$Utilization, na.rm = T),
                     max(RL1$Utilization, na.rm = T)
                     )

which(RL1$Utilization < 0.90)

length(which(RL1$Utilization < 0.90))
util_under_90_flag <- length(which(RL1$Utilization < 0.90)) > 0

list_rl1<- list("RL1", utils_stats_rl1,util_under_90_flag)

list_rl1

#Naming components of Lists
names(list_rl1)
names(list_rl1) <- c("machine","Stats","LowThreshold")

#Another way.Like the dataframes

rm(list_rl1)
list_rl1<- list(Machine="RL1",Stats=utils_stats_rl1,LowThreshold=util_under_90_flag)
names(list_rl1)


#Extracting components of List
#[]
#[[]]
#$
list_rl1
list_rl1[1]
list_rl1[[1]]

list_rl1[2] #returns list
list_rl1[[2]] #Return values in list on index
typeof(list_rl1[[2]])
typeof(list_rl1$Stats)
list_rl1

#access 3rd element of the vector
list_rl1[[2]][3]
list_rl1$Stats[3]

#Adding and deleting list components
list_rl1[4] <- "New Information"
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]

#Remove a components
list_rl1[4] <- NULL

#add dataframe to List

list_rl1$Data <- RL1
summary(list_rl1)
str(list_rl1)


#Subsetting a list

list_rl1[1:3]
list_rl1[c(1,4)]
sublist_rl1 <- list_rl1[c("Machine","Stats")]
sublist_rl1[[2]][2]
#Double square brackets are not for Subsetting
list_rl1[[1:3]]
list_rl1[[4]]

#Building Timeseries Shot

p<- ggplot(data=util)
p + geom_line(aes(x=PosixTime,y=Utilization,color=Machine),size = 1.2) + facet_grid(Machine~.)+geom_hline(yintercept = 0.90, colour = "Gray", size = 1.2)

#Store plots in list
list_rl1$Plot <- p

#Project 3
#Read Data

Chicago <- read.csv("Chicago-F.csv", row.names=1)
NewYork <- read.csv("NewYork-F.csv", row.names=1)
Houston <- read.csv("Houston-F.csv", row.names=1)
SanFrancisco <- read.csv("SanFrancisco-F.csv", row.names=1)

#Check if dataframe
Chicago
is.data.frame(Chicago)

#Check if its a matrix
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)

#Check matrix
is.matrix(Chicago)

Weather <- list(Chicago=Chicago,NewYork=NewYork,Houston=Houston,SanFrancisco=SanFrancisco)

#Lets try it out
Weather[3]
Weather[[3]]
Weather$Houston

#apply lapply by eapply lapply sapply vapply replicate mapply rapply

apply(Chicago,1,mean)

#Check
mean(Chicago["DaysWithPrecip",])
#rows 1
apply(Chicago,1,max)
apply(Chicago,1,min)
#Cols 2
apply(Chicago,2,max)
apply(Chicago,2,min)

#Using for loop
output<-NULL
for(i in 1:5){
  output[i]<-mean(Chicago[i,])
}

names(output)<- rownames(Chicago)    

output

#2.Via apply function
apply(Chicago, 1, mean)


#Lets look LAPPLY(Apply over a list or vector)
t(Chicago) #t is transpose

lapply(Weather, t)

mynewlist <- lapply(Weather,t)


#RBIND to add a new row to the dataframe
rbind(Chicago,NewRow=1:12)
lapply(Weather, rbind, NewRow=1:12)

#Example3 applying rowmeans
rowMeans(Chicago) #Identical to : apply(Chicago,1,mean)
lapply(Weather, rowMeans)

#Also explore rowMeans, ColMeans, rowSums, colSums

#Combinging lapply with  [ ] Operator
lapply(Weather,"[",1,1)
Weather
lapply(Weather, "[",1,)
Weather
lapply(Weather, "[", , 3)

#Adding your functions

lapply(Weather, function(x) x[1,])

lapply(Weather, function(x) x[5,])

lapply(Weather, function(x) x[,12])

lapply(Weather, function(z) z[1,]-z[2,])

lapply(Weather, function(z) round(z[1,]-z[2,]/z[2,],2))


#Using SAPPLY puts in to beautiful matrix 

lapply(Weather,"[",1,7)
sapply(Weather,"[",1,7)
sapply(Weather, "[", 1, 10:12)
round(sapply(Weather, rowMeans))

#Nesting apply functions
lapply(Weather, apply, 1 , max)
lapply(Weather,function(x) apply(x,1,max))


#Which Max() and which.min()
which.max((Chicago[1,]))
names(which.max(Chicago[1,]))
apply(Chicago,1,function(x) names(which.max(x)))
lapply(Weather,function(y) apply(y,1,function(x) names(which.max(x))))
